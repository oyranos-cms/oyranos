_oyjl_args()
{
    local cur prev words cword
    _init_completion -s || return

    #set -x -v

    local SUB_COMMAND
    if [[ ${COMP_WORDS[1]} != "" ]]; then
      SUB_COMMAND=${COMP_WORDS[1]}
    fi

    local SEARCH=${COMP_WORDS[COMP_CWORD]}
    if [[ "$SEARCH" == "=" ]]; then
      SEARCH=""
    fi

    : "autocomplete options with choices for long options "$prev""
    case "$prev" in
        --help) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('1' 'synopsis' 'Umwandlung' 'Verschiedenes')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --export) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('man' 'markdown' 'json' 'json+command' 'export')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --render) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('gui' 'web' '-')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
    esac
    : "autocomplete options with choices for single letter options "$cur""
    case "$cur" in
        -h=*) # single letter option with static args
            local IFS=$'\n'
            local WORD_LIST=('1' 'synopsis' 'Umwandlung' 'Verschiedenes')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -X=*) # single letter option with static args
            local IFS=$'\n'
            local WORD_LIST=('man' 'markdown' 'json' 'json+command' 'export')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -R=*) # single letter option with static args
            local IFS=$'\n'
            local WORD_LIST=('gui' 'web' '-')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
    esac


    : "autocomplete options "$cur""
    case "$cur" in
        -i|-h|-X|-R)
            : "finish short options with choices"
            COMPREPLY=("$cur=\"")
            set +x +v
            return
            ;;
        --input|--help|--export|--render)
            : "finish long options with choices"
            COMPREPLY=("$cur=\"")
            set +x +v
            return
            ;;
        -v|-V)
            : "finish short options without choices"
            COMPREPLY=("$cur ")
            set +x +v
            return
            ;;
        --completion-bash|--synopsis|--verbose|--version)
            : "finish long options without choices"
            COMPREPLY=("$cur ")
            set +x +v
            return
            ;;
    esac


    : "show help for none '@' UIs"
    if [[ "$cur" == "" ]]; then
      if [[ ${COMP_WORDS[1]} == "" ]]; then
        $1 help synopsis 1>&2
      else
        $1 help ${COMP_WORDS[1]} 1>&2
      fi
    fi


    : "suggest group options for subcommands"
    if [[ "$cur" == "" ]] || [[ "$cur" == "-" ]] || [[ "$cur" == -- ]] || [[ "$cur" == -* ]]; then
      case "${COMP_WORDS[1]}" in
        -i|--input)
          COMPREPLY=($(compgen -W '--completion-bash -v --verbose' -- "$cur"))
            set +x +v
            return
            ;;
        -h|--help|-X|--export|-V|--version)
          COMPREPLY=($(compgen -W '-v --verbose' -- "$cur"))
            set +x +v
            return
            ;;
      esac
    fi

    : "suggest mandatory options on first args only"
    if [[ "${COMP_WORDS[2]}" == "" ]]; then
      WORD_LIST=("${WORD_LIST[@]}" -i= --input= -h= --help= -X= --export= -V --version)
      COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
      set +x +v
      return
    fi

    set +x +v
} &&
complete -F _oyjl_args -o nospace oyjl-args


