.TH "oyjl-args" 1 "June 26, 2019" "User Commands"
.SH NAME
oyjl-args v1.0.0 \- Ui to source code
.SH SYNOPSIS
\fBoyjl-args\fR \fB\-i\fR \fIFILENAME\fR [\fB\-\-c-stand-alone\fR] [\fB\-\-completion-bash\fR] [\fB\-v\fR]
.br
\fBoyjl-args\fR \fB\-h\fR\fI[=synopsis|...]\fR \fB\-X\fR \fIjson|json+command|man|markdown\fR \fB\-R\fR \fIgui|cli|web|...\fR \fB\-V\fR [\fB\-i\fR \fIFILENAME\fR] [\fB\-v\fR]
.SH DESCRIPTION
Tool to convert UI JSON description from *-X export* into source code.
.SH OPTIONS
.SS
Generate source code
\fBoyjl-args\fR \fB\-i\fR \fIFILENAME\fR [\fB\-\-c-stand-alone\fR] [\fB\-\-completion-bash\fR] [\fB\-v\fR]
.br
\fB\-i\fR|\fB\-\-input\fR \fIFILENAME\fR	Set Input
.RS
For C code output (default) and --completion-bash output use -X=export JSON. For --render=XXX use -X=json JSON.
.RE
\fB\-\-c-stand-alone\fR	Generate C code for oyjl_args.c inclusion.
.RS
Omit libOyjlCore reference.
.RE
\fB\-\-completion-bash\fR	Generate bash completion code
.br
.SS
General options
\fBoyjl-args\fR \fB\-h\fR\fI[=synopsis|...]\fR \fB\-X\fR \fIjson|json+command|man|markdown\fR \fB\-R\fR \fIgui|cli|web|...\fR \fB\-V\fR [\fB\-i\fR \fIFILENAME\fR] [\fB\-v\fR]
.br
\fB\-h\fR|\fB\-\-help\fR\fI[=synopsis|...]\fR	Print help text
.RS
Show usage information and hints for the tool.
.RE
	\fB\-h\fR -		# Full Help : Print help for all groups
.br
	\fB\-h\fR synopsis		# Synopsis : List groups - Show all groups including syntax
.br
\fB\-X\fR|\fB\-\-export\fR \fIjson|json+command|man|markdown\fR	Export formated text
.RS
Get UI converted into text formats
.RE
	\fB\-X\fR man		# Man : Unix Man page - Get a unix man page
.br
	\fB\-X\fR markdown		# Markdown : Formated text - Get formated text
.br
	\fB\-X\fR json		# Json : GUI - Get a Oyjl Json UI declaration
.br
	\fB\-X\fR json+command		# Json + Command : GUI + Command - Get Oyjl Json UI declaration incuding command
.br
	\fB\-X\fR export		# Export : All available data - Get UI data for developers
.br
\fB\-R\fR|\fB\-\-render\fR \fIgui|cli|web|...\fR	Select Renderer
.RS
Select and possibly configure Renderer. -R="gui" will just launch a graphical UI. -R="web:port=port_number:https_key=TLS_private_key_filename:https_cert=TLS_CA_certificate_filename:css=layout_filename.css" will launch a local Web Server, which listens on local port.
.RE
	\fB\-R\fR gui		# Gui : Show UI - Display a interactive graphical User Interface.
.br
	\fB\-R\fR cli		# Cli : Show UI - Print on Command Line Interface.
.br
	\fB\-R\fR web		# Web : Start Web Server - Start a local Web Service to connect a Webbrowser with. Supported subargs are: port for port number, https_key and https_cert for passing in encryption filenames, security=readonly|interactive|lazy with "readonly" showing a static page, "interactive" showing GUI elements and "lazy" executing the tool. The "css=layout.css" lets you style your output by CSS.
.br
	\fB\-R\fR -
.br
\fB\-V\fR|\fB\-\-version\fR	Version
.br
\fB\-v\fR|\fB\-\-verbose\fR	verbose
.br
.SH EXAMPLES
.TP
Convert eXported developer JSON to C source
.br
oyjl-args -X export | oyjl-args -i -
.SH SEE ALSO
.TP
oyjl(1) oyjl-translate(1) oyjl-args-qml(1)
.br
https://codedocs.xyz/oyranos-cms/oyranos/group__oyjl.html
.SH AUTHOR
Kai-Uwe Behrmann http://www.oyranos.org
.SH COPYRIGHT
Copyright Â© 2017-2022 Kai-Uwe Behrmann
.br
License: newBSD http://www.oyranos.org
.SH BUGS
https://www.gitlab.com/oyranos/oyranos/issues 

