.TH "oyjl-translate" 1 "2. Januar 2020" "User Commands"
.SH NAME
oyjl-translate v1.0.0 \- Oyjl Übersetzung
.SH ÜBERSICHT
\fBoyjl-translate\fR \fB\-e\fR \fB\-k\fR \fIname,description,help...\fR [\fB\-i\fR \fIDATEINAME\fR] [\fB\-o\fR \fIDATEINAME\fR] [\fB\-f\fR \fIFORMAT\fR] [\fB\-v\fR] [\fB\-\-function-name\fR \fINAME\fR] [\fB\-\-function-name-out\fR \fINAME\fR]
.br
\fBoyjl-translate\fR \fB\-a\fR \fB\-d\fR \fITEXTKATALOG1,TEXTKATALOG2\fR \fB\-k\fR \fIname,description,help...\fR [\fB\-i\fR \fIDATEINAME\fR] [\fB\-o\fR \fIDATEINAME\fR] [\fB\-l\fR \fIde_DE,es_ES\fR] [\fB\-p\fR \fILOCALEPFAD\fR] [\fB\-w\fR \fITYP\fR] [\fB\-t\fR] [\fB\-n\fR] [\fB\-v\fR]
.br
\fBoyjl-translate\fR \fB\-c\fR \fB\-\-locale\fR \fIde_DE\fR [\fB\-i\fR \fIDATEINAME\fR] [\fB\-o\fR \fIDATEINAME\fR] [\fB\-n\fR] [\fB\-v\fR]
.br
\fBoyjl-translate\fR \fB\-h\fR\fI[=synopsis|...]\fR \fB\-X\fR \fIjson|json+command|man|markdown\fR \fB\-V\fR [\fB\-v\fR]
.SH BESCHREIBUNG
Wandle Oyjl UI JSON nach C übersetzbare Texte für gettext Werkzeuge und übersetze die UI eines Werkzeuges mit der programmeigenen ID. Das resultierende Oyjl UI JSON kann für eine übersetzte Darstellung benutzt werden.
.SH OPTIONEN
.SS
Setze grundlegende Parameter
.br
\fB\-i\fR|\fB\-\-input\fR \fIDATEINAME\fR	Datei oder Datenstrom
.RS
Ein JSON-Dateiname oder Eingangsdatenstrom wie "stdin"
.RE
\fB\-o\fR|\fB\-\-output\fR \fIDATEINAME\fR	Datei oder Datenstrom
.RS
Ein JSON-Dateiname oder Ausgangsdatenstrom wie "stdout"
.RE
.SS
Wandle JSON/C in gettext lesbare C Texte
\fBoyjl-translate\fR \fB\-e\fR \fB\-k\fR \fIname,description,help...\fR [\fB\-i\fR \fIDATEINAME\fR] [\fB\-o\fR \fIDATEINAME\fR] [\fB\-f\fR \fIFORMAT\fR] [\fB\-v\fR] [\fB\-\-function-name\fR \fINAME\fR] [\fB\-\-function-name-out\fR \fINAME\fR]
.br
Zwei Eingabearten werden unterstützt. Lese Oyjl UI -X=export Json. Oder suche in C Quelltext nach --function-name definierten Name und ersetze ihn in --output durch --function-name-out. Die letztere Art ist hilfreich für oyjlTranslation_s, Qt Stil oder andere Übersetzungsmethoden.
.br
.sp
.br
\fB\-e\fR|\fB\-\-extract\fR	Auszug übersetzbarer Nachrichten
.RS
Wandle JSON in gettext lesbare C Texte
.RE
\fB\-f\fR|\fB\-\-format\fR \fIFORMAT\fR	Formatierungstext
.RS
Ein Ausgabeformattext welcher %s als Platzhalter enthält.
.RE
	\fB\-f\fR json		# ÜbersetzungJSON : Erzeuge ÜbersetzungJSON mit -af=json. - Diese Option ist nur für kleinere Projekte nützlich als Initialstart.
.br
	\fB\-f\fR i18n(\"%s\");
.br
\fB\-k\fR|\fB\-\-key-list\fR \fIname,description,help...\fR	Schlüsselnamenliste
.RS
zu benutzende Schlüsselwörter in einer kommagetrennten Liste
.RE
\fB\-\-function-name\fR \fINAME\fR	Funktion Name
.RS
Ein eingabeseitiger Funktionsname. z.B.: "i18n(\""
.RE
	\fB\-\-function-name\fR _(\"
.br
	\fB\-\-function-name\fR i18n(\"
.br
	\fB\-\-function-name\fR QObject::tr(\"
.br
\fB\-\-function-name-out\fR \fINAME\fR	Funktion Name
.RS
Ein ausgabeseitiger Funktionsname. z.B.: "_"
.RE
	\fB\-\-function-name-out\fR _(\"
.br
	\fB\-\-function-name-out\fR i18n(\"
.br
	\fB\-\-function-name-out\fR QObject::tr(\"
.br
.SS
Füge mit gettext übersetzte Schlüssel zu JSON hinzu
\fBoyjl-translate\fR \fB\-a\fR \fB\-d\fR \fITEXTKATALOG1,TEXTKATALOG2\fR \fB\-k\fR \fIname,description,help...\fR [\fB\-i\fR \fIDATEINAME\fR] [\fB\-o\fR \fIDATEINAME\fR] [\fB\-l\fR \fIde_DE,es_ES\fR] [\fB\-p\fR \fILOCALEPFAD\fR] [\fB\-w\fR \fITYP\fR] [\fB\-t\fR] [\fB\-n\fR] [\fB\-v\fR]
.br
\fB\-a\fR|\fB\-\-add\fR	Füge Übersetzung hinzu
.RS
Füge mit gettext übersetzte Schlüssel zu JSON hinzu
.RE
\fB\-d\fR|\fB\-\-domain\fR \fITEXTKATALOG1,TEXTKATALOG2\fR	Textkatalogliste
.RS
Text Hausadressliste für das Projekt
.RE
\fB\-l\fR|\fB\-\-locales\fR \fIde_DE,es_ES\fR	Sprachliste
.RS
Sprachen in einer kommagetrennten Liste
.RE
\fB\-p\fR|\fB\-\-localedir\fR \fILOCALEPFAD\fR	Übersetzungsverzeichnis
.RS
locale Verzeichnis mit deine-locale/LC_MESSAGES/deine-textdomain.mo gettext Übersetzungen
.RE
\fB\-k\fR|\fB\-\-key-list\fR \fIname,description,help...\fR	Schlüsselnamenliste
.RS
zu benutzende Schlüsselwörter in einer kommagetrennten Liste
.RE
\fB\-w\fR|\fB\-\-wrap\fR \fITYP\fR	sprachspezifische Formatierung
.br
	\fB\-w\fR C		# C statischer Text
.br
\fB\-t\fR|\fB\-\-translations-only\fR	Nur Übersetzungen
.RS
gebe nur Übersetzungen aus
.RE
\fB\-n\fR|\fB\-\-list-empty\fR	Nicht übersetzte Liste
.RS
liste auch leere Übersetzungen auf
.RE
.SS
Kopiere Schlüssel nach JSON
\fBoyjl-translate\fR \fB\-c\fR \fB\-\-locale\fR \fIde_DE\fR [\fB\-i\fR \fIDATEINAME\fR] [\fB\-o\fR \fIDATEINAME\fR] [\fB\-n\fR] [\fB\-v\fR]
.br
Importiere Übersetzungen aus anderen Formaten ohne gettext. Unterstützt ist --input=Qt-xml-format.tr
.br
.sp
.br
\fB\-c\fR|\fB\-\-copy\fR	Kopiere Übersetzungen
.RS
Kopiere übersetzte Schlüssel nach JSON. Lasse gettext aus.
.RE
\fB\-\-locale\fR \fIde_DE\fR	Einzelne Sprache
.br
\fB\-n\fR|\fB\-\-list-empty\fR	Nicht übersetzte Liste
.RS
liste auch leere Übersetzungen auf
.RE
.SS
Allgemeine Optionen
\fBoyjl-translate\fR \fB\-h\fR\fI[=synopsis|...]\fR \fB\-X\fR \fIjson|json+command|man|markdown\fR \fB\-V\fR [\fB\-v\fR]
.br
\fB\-h\fR|\fB\-\-help\fR\fI[=synopsis|...]\fR	Zeige Hilfetext an
.RS
Zeige Benutzungsinformationen und Hinweise für das Werkzeug.
.RE
	\fB\-h\fR -		# Vollständige Hilfe : Zeige Hilfe für alle Gruppen
.br
	\fB\-h\fR synopsis		# Übersicht : Liste Gruppen - Zeige alle Gruppen mit Syntax
.br
\fB\-X\fR|\fB\-\-export\fR \fIjson|json+command|man|markdown\fR	Exportiere formatierten Text
.RS
Hole Benutzerschnittstelle als Text
.RE
	\fB\-X\fR man		# Handbuch : Unix Handbuchseite - Hole Unix Handbuchseite
.br
	\fB\-X\fR markdown		# Markdown : Formatierter Text - Hole formatierten Text
.br
	\fB\-X\fR json		# Json : GUI - Hole Oyjl Json Benutzerschnittstelle
.br
	\fB\-X\fR json+command		# Json + Kommando : GUI + Kommando - Hole Oyjl Json Benutzerschnittstelle mit Kommando
.br
	\fB\-X\fR export		# Export : Alle verfügbaren Daten - Erhalte Daten für Entwickler. Das Format kann mit dem oyjl-args Werkzeug umgewandelt werden.
.br
\fB\-V\fR|\fB\-\-version\fR	Version
.br
\fB\-v\fR|\fB\-\-verbose\fR	mehr Infos
.br
.SH BEISPIELE
.TP
Wandle JSON in gettext lesbare C Texte
.br
oyjl-translate -e [-v] -i oyjl-ui.json -o ergebnis.json -f '_("%s"); ' -k name,description,help
.TP
Wandle C Quelltext nach ÜbersetzungsJSON
.br
oyjl-translate -e -f=json -i oyjl-ui.json -o ergebnis.json
.TP
Füge mit gettext übersetzte Schlüssel zu JSON hinzu
.br
oyjl-translate -a -i oyjl-ui.json -o ergebnis.json -k name,description,help -d TEXTKATALOG -p SPRACHPFAD -l de_DE,es_ES
.TP
Kopiere übersetzte Schlüssel nach JSON. Lasse gettext aus.
.br
oyjl-translate -c -i sprache.tr -o ergebnis.json --locale de_DE
.TP
Betrachte Unix Handbuchseite
.br
oyjl-translate -X man | groff -T utf8 -man -
.SH UMGEBUNGSVARIABLEN
.TP
OUTPUT_CHARSET
.br
Setze GNU gettext Textformatierung.
.br
Alternativ kann die -l=de_DE.UTF-8 Option genutzt werden.
.br
Ein typischer Wert ist UTF-8.
.SH SIEHE AUCH
.TP
oyjl(1) oyjl-args(1) oyjl-args-qml(1)
.br
https://codedocs.xyz/oyranos-cms/oyranos/group__oyjl.html
.SH AUTOR
Kai-Uwe Behrmann http://www.oyranos.org
.SH KOPIERRECHT
Copyright © 2017-2022 Kai-Uwe Behrmann
.br
Lizenz: newBSD http://www.oyranos.org
.SH FEHLER
https://www.gitlab.com/oyranos/oyranos/issues 

