_oyjl()
{
    local cur prev words cword
    _init_completion -s || return

    #set -x -v
    : "autocomplete options with choices for long options "$prev""
    case "$prev" in
        --try-format) # long option with static args
            local WORD_LIST=('JSON')
            _oyra_complete_choices
            set +x +v
            return
            ;;
        --help) # long option with static args
            local WORD_LIST=('1' 'synopsis' 'Eingabe' 'Zeige JSON' 'Zeige YAML' 'Zeige XML' 'Anzahl' 'Schlüsselname' 'Typ' 'Pfade' 'Format' 'Verschiedenes')
            _oyra_complete_choices
            set +x +v
            return
            ;;
        --render) # long option with static args
            local WORD_LIST=('gui' 'web' '-')
            _oyra_complete_choices
            set +x +v
            return
            ;;
        --export) # long option with static args
            local WORD_LIST=('man' 'markdown' 'json' 'json+command' 'export')
            _oyra_complete_choices
            set +x +v
            return
            ;;
    esac
    : "autocomplete options with choices for single letter options "$cur""
    case "$cur" in
        -r=*) # single letter option with static args
            local WORD_LIST=('JSON')
            _oyra_complete_choices
            set +x +v
            return
            ;;
        -h=*) # single letter option with static args
            local WORD_LIST=('1' 'synopsis' 'Eingabe' 'Zeige JSON' 'Zeige YAML' 'Zeige XML' 'Anzahl' 'Schlüsselname' 'Typ' 'Pfade' 'Format' 'Verschiedenes')
            _oyra_complete_choices
            set +x +v
            return
            ;;
        -R=*) # single letter option with static args
            local WORD_LIST=('gui' 'web' '-')
            _oyra_complete_choices
            set +x +v
            return
            ;;
        -X=*) # single letter option with static args
            local WORD_LIST=('man' 'markdown' 'json' 'json+command' 'export')
            _oyra_complete_choices
            set +x +v
            return
            ;;
    esac


    : "autocomplete options "$cur""
    case "$cur" in
        -s|-i|-x|-r|-h|-R|-X)
            : "finish short options with choices"
            COMPREPLY=("$cur=")
            set +x +v
            return
            ;;
        --set|--input|--xpath|--try-format|--help|--render|--export)
            : "finish long options with choices"
            COMPREPLY=("$cur=")
            set +x +v
            return
            ;;
        -j|-y|-m|-c|-k|-t|-f|-v|-V)
            : "finish short options without choices"
            COMPREPLY=("$cur ")
            set +x +v
            return
            ;;
        --json|--yaml|--xml|--count|--key|--paths|--type|--format|--synopsis|--verbose|--version)
            : "finish long options without choices"
            COMPREPLY=("$cur ")
            set +x +v
            return
            ;;
    esac


    : "show help for none '@' UIs"
    if [[ "$cur" == "" ]]; then
      if [[ ${COMP_WORDS[1]} == "" ]]; then
        $1 help synopsis 1>&2
      else
        $1 help ${COMP_WORDS[1]} 1>&2
      fi
    fi


    : "suggest group options for subcommands"
    if [[ "$cur" == "" ]] || [[ "$cur" == "-" ]] || [[ "$cur" == -- ]] || [[ "$cur" == -* ]]; then
      case "${COMP_WORDS[1]}" in
        -j|json)
          COMPREPLY=($(compgen -W '-i= --input= -x= --xpath= -s= --set= -r= --try-format=' -- "$cur"))
            set +x +v
            return
            ;;
        -y|yaml)
          COMPREPLY=($(compgen -W '-i= --input= -x= --xpath= -s= --set= -r= --try-format=' -- "$cur"))
            set +x +v
            return
            ;;
        -m|xml)
          COMPREPLY=($(compgen -W '-i= --input= -x= --xpath= -s= --set= -r= --try-format=' -- "$cur"))
            set +x +v
            return
            ;;
        -c|count)
          COMPREPLY=($(compgen -W '-i= --input= -x= --xpath= -r= --try-format=' -- "$cur"))
            set +x +v
            return
            ;;
        -k|key)
          COMPREPLY=($(compgen -W '-i= --input= -x= --xpath= -r= --try-format=' -- "$cur"))
            set +x +v
            return
            ;;
        -t|type)
          COMPREPLY=($(compgen -W '-i= --input= -x= --xpath= -r= --try-format=' -- "$cur"))
            set +x +v
            return
            ;;
        paths)
          COMPREPLY=($(compgen -W '-i= --input= -x= --xpath= -r= --try-format=' -- "$cur"))
            set +x +v
            return
            ;;
        -f|format)
          COMPREPLY=($(compgen -W '-i= --input= -x= --xpath= -r= --try-format=' -- "$cur"))
            set +x +v
            return
            ;;
        -h|--help|-X|--export|-V|--version)
          COMPREPLY=($(compgen -W '-v --verbose' -- "$cur"))
            set +x +v
            return
            ;;
      esac
    fi

    : "suggest mandatory options on first args only"
    if [[ "${COMP_WORDS[2]}" == "" ]]; then
      WORD_LIST=("${WORD_LIST[@]}" -j json -y yaml -m xml -c count -k key -t type paths -f format -h= --help= -X= --export= -V --version)
      _oyra_complete_choices
      set +x +v
      return
    fi

    set +x +v
} &&
complete -F _oyjl -o nospace oyjl


