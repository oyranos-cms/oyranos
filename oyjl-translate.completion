_oyjl_translate()
{
    local cur prev words cword
    _init_completion -s || return

    #set -x -v

    local SEARCH=${COMP_WORDS[COMP_CWORD]}
    if [[ "$SEARCH" == "=" ]]; then
      SEARCH=""
    fi

    : "autocomplete options with choices for long options "$prev""
    case "$prev" in
        --wrap) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('C')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --function-name) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('_(\"' 'i18n(\"' 'QObject::tr(\"')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --function-name-out) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('_(\"' 'i18n(\"' 'QObject::tr(\"')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --help) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('-' 'synopsis')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --export) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('man' 'markdown' 'json' 'json+command' 'export')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --render) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('gui' 'cli' 'web' '-')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
    esac
    : "autocomplete options with choices for single letter options "$cur""
    case "$cur" in
        -w=*) # single letter option with static args
            local IFS=$'\n'
            local WORD_LIST=('C')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -h=*) # single letter option with static args
            local IFS=$'\n'
            local WORD_LIST=('-' 'synopsis')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -X=*) # single letter option with static args
            local IFS=$'\n'
            local WORD_LIST=('man' 'markdown' 'json' 'json+command' 'export')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -R=*) # single letter option with static args
            local IFS=$'\n'
            local WORD_LIST=('gui' 'cli' 'web' '-')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
    esac


    : "autocomplete options "$cur""
    case "$cur" in
        -i|-o|-f|-d|-k|-l|-p|-w|-h|-X|-R)
            : "finish short options with choices"
            COMPREPLY=("$cur=\"")
            set +x +v
            return
            ;;
        --input|--output|--format|--domain|--key-list|--locale|--locales|--localedir|--wrap|--function-name|--function-name-out|--help|--export|--render)
            : "finish long options with choices"
            COMPREPLY=("$cur=\"")
            set +x +v
            return
            ;;
        -a|-c|-n|-t|-e|-v|-V)
            : "finish short options without choices"
            COMPREPLY=("$cur ")
            set +x +v
            return
            ;;
        --add|--copy|--list-empty|--translations-only|--extract|--synopsis|--verbose|--version)
            : "finish long options without choices"
            COMPREPLY=("$cur ")
            set +x +v
            return
            ;;
    esac


    : "show help for none '@' UIs"
    if [[ "$cur" == "" ]]; then
      if [[ ${COMP_WORDS[1]} == "" ]]; then
        $1 help synopsis 1>&2
      else
        $1 help ${COMP_WORDS[1]} 1>&2
      fi
    fi


    : "suggest group options for subcommands"
    if [[ "$cur" == "" ]] || [[ "$cur" == "-" ]] || [[ "$cur" == -- ]] || [[ "$cur" == -* ]]; then
      case "${COMP_WORDS[1]}" in
        -e|--extract|-k|--key-list)
          COMPREPLY=($(compgen -W '-i= --input= -o= --output= -f= --format= -v --verbose --function-name= --function-name-out=' -- "$cur"))
            set +x +v
            return
            ;;
        -a|--add|-d|--domain|-k|--key-list)
          COMPREPLY=($(compgen -W '-i= --input= -o= --output= -l= --locales= -p= --localedir= -w= --wrap= -t --translations-only -n --list-empty -v --verbose' -- "$cur"))
            set +x +v
            return
            ;;
        -c|--copy|--locale)
          COMPREPLY=($(compgen -W '-i= --input= -o= --output= -n --list-empty -v --verbose' -- "$cur"))
            set +x +v
            return
            ;;
        -h|--help|-X|--export|-V|--version)
          COMPREPLY=($(compgen -W '-v --verbose' -- "$cur"))
            set +x +v
            return
            ;;
      esac
    fi

    : "suggest mandatory options on first args only"
    if [[ "${COMP_WORDS[2]}" == "" ]]; then
      local WORD_LIST=()
      WORD_LIST=("${WORD_LIST[@]}" -e --extract -k= --key-list= -a --add -d= --domain= -k= --key-list= -c --copy --locale= -h= --help= -X= --export= -V --version)
      COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
      set +x +v
      return
    fi

    set +x +v
} &&
complete -o nosort -F _oyjl_translate -o nospace oyjl-translate


