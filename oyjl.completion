_oyjl()
{
    local cur prev words cword
    _init_completion -s || return

    #set -x -v

    local SEARCH=${COMP_WORDS[COMP_CWORD]}
    if [[ "$SEARCH" == "=" ]]; then
      SEARCH=""
    fi

    : "autocomplete options with choices for long options "$prev""
    case "$prev" in
        --input) # long option with dynamic args
            local OYJL_TEXTS
            if [[ "${COMP_WORDS[COMP_CWORD]}" == "=" ]]; then
              OYJL_TEXTS=$(${COMP_LINE}oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            else
              OYJL_TEXTS=$(${COMP_LINE} --input=oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            fi
            local IFS=$'\n'
            local WORD_LIST=()
            for OYJL_TEXT in $OYJL_TEXTS
              do WORD_LIST=("${WORD_LIST[@]}" "$OYJL_TEXT")
            done
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --try-format) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('JSON')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --wrap) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('C')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --wrap-name) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('wrap')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --help) # long option with dynamic args
            local OYJL_TEXTS
            if [[ "${COMP_WORDS[COMP_CWORD]}" == "=" ]]; then
              OYJL_TEXTS=$(${COMP_LINE}oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            else
              OYJL_TEXTS=$(${COMP_LINE} --help=oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            fi
            local IFS=$'\n'
            local WORD_LIST=()
            for OYJL_TEXT in $OYJL_TEXTS
              do WORD_LIST=("${WORD_LIST[@]}" "$OYJL_TEXT")
            done
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --render) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('gui' 'cli' 'web' '-')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --export) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('man' 'markdown' 'json' 'json+command' 'export')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
    esac
    : "autocomplete options with choices for single letter options "$cur""
    case "$cur" in
        -i=*) # single letter option with dynamic args
            local OYJL_TEXTS
            if [[ "${COMP_WORDS[COMP_CWORD]}" == "=" ]]; then
              OYJL_TEXTS=$(${COMP_LINE}oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            else
              OYJL_TEXTS=$(${COMP_LINE} -i=oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            fi
            local IFS=$'\n'
            local WORD_LIST=()
            for OYJL_TEXT in $OYJL_TEXTS
              do WORD_LIST=("${WORD_LIST[@]}" "$OYJL_TEXT")
            done
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -r=*) # single letter option with static args
            local IFS=$'\n'
            local WORD_LIST=('JSON')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -w=*) # single letter option with static args
            local IFS=$'\n'
            local WORD_LIST=('C')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -W=*) # single letter option with static args
            local IFS=$'\n'
            local WORD_LIST=('wrap')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -h=*) # single letter option with dynamic args
            local OYJL_TEXTS
            if [[ "${COMP_WORDS[COMP_CWORD]}" == "=" ]]; then
              OYJL_TEXTS=$(${COMP_LINE}oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            else
              OYJL_TEXTS=$(${COMP_LINE} -h=oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            fi
            local IFS=$'\n'
            local WORD_LIST=()
            for OYJL_TEXT in $OYJL_TEXTS
              do WORD_LIST=("${WORD_LIST[@]}" "$OYJL_TEXT")
            done
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -R=*) # single letter option with static args
            local IFS=$'\n'
            local WORD_LIST=('gui' 'cli' 'web' '-')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -X=*) # single letter option with static args
            local IFS=$'\n'
            local WORD_LIST=('man' 'markdown' 'json' 'json+command' 'export')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
    esac


    : "autocomplete options "$cur""
    case "$cur" in
        -s|-i|-x|-r|-w|-W|-h|-R|-X)
            : "finish short options with choices"
            COMPREPLY=("$cur=\"")
            set +x +v
            return
            ;;
        --set|--input|--xpath|--try-format|--wrap|--wrap-name|--help|--render|--export)
            : "finish long options with choices"
            COMPREPLY=("$cur=\"")
            set +x +v
            return
            ;;
        -j|-y|-m|-c|-k|-t|-f|-p|-v|-V)
            : "finish short options without choices"
            COMPREPLY=("$cur ")
            set +x +v
            return
            ;;
        --json|--yaml|--xml|--count|--key|--paths|--type|--format|--plain|--synopsis|--verbose|--version)
            : "finish long options without choices"
            COMPREPLY=("$cur ")
            set +x +v
            return
            ;;
    esac


    : "show help for none '@' UIs"
    if [[ "$cur" == "" ]]; then
      if [[ ${COMP_WORDS[1]} == "" ]]; then
        $1 help synopsis 1>&2
      else
        $1 help ${COMP_WORDS[1]} 1>&2
      fi
    fi


    : "suggest group options for subcommands"
    if [[ "$cur" == "" ]] || [[ "$cur" == "-" ]] || [[ "$cur" == -- ]] || [[ "$cur" == -* ]]; then
      case "${COMP_WORDS[1]}" in
        -j|json)
          COMPREPLY=($(compgen -W '-i= --input= -x= --xpath= -s= --set= -r= --try-format= -p --plain -w= --wrap= -W= --wrap-name=' -- "$cur"))
            set +x +v
            return
            ;;
        -y|yaml)
          COMPREPLY=($(compgen -W '-i= --input= -x= --xpath= -s= --set= -r= --try-format= -p --plain -w= --wrap= -W= --wrap-name=' -- "$cur"))
            set +x +v
            return
            ;;
        -m|xml)
          COMPREPLY=($(compgen -W '-i= --input= -x= --xpath= -s= --set= -r= --try-format= -p --plain -w= --wrap= -W= --wrap-name=' -- "$cur"))
            set +x +v
            return
            ;;
        -c|count)
          COMPREPLY=($(compgen -W '-i= --input= -x= --xpath= -r= --try-format=' -- "$cur"))
            set +x +v
            return
            ;;
        -k|key)
          COMPREPLY=($(compgen -W '-i= --input= -x= --xpath= -r= --try-format=' -- "$cur"))
            set +x +v
            return
            ;;
        -t|type)
          COMPREPLY=($(compgen -W '-i= --input= -x= --xpath= -r= --try-format=' -- "$cur"))
            set +x +v
            return
            ;;
        paths)
          COMPREPLY=($(compgen -W '-i= --input= -x= --xpath= -r= --try-format=' -- "$cur"))
            set +x +v
            return
            ;;
        -f|format)
          COMPREPLY=($(compgen -W '-i= --input= -x= --xpath= -r= --try-format=' -- "$cur"))
            set +x +v
            return
            ;;
        -h|--help|-X|--export|-V|--version)
          COMPREPLY=($(compgen -W '-v --verbose' -- "$cur"))
            set +x +v
            return
            ;;
      esac
    fi

    : "suggest mandatory options on first args only"
    if [[ "${COMP_WORDS[2]}" == "" ]]; then
      local WORD_LIST=()
      WORD_LIST=("${WORD_LIST[@]}" -j json -y yaml -m xml -c count -k key -t type paths -f format -h= --help= -X= --export= -V --version)
      COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
      set +x +v
      return
    fi

    set +x +v
} &&
complete -o nosort -F _oyjl -o nospace oyjl


