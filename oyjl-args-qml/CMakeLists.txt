# Json Ui renderer in Qt's QML+JavaScript
SET( PROJECT_NAME oyjl-args-qml )

IF( NOT HAVE_OYJL )
  INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR}/.. )
ENDIF()

FIND_PACKAGE(Qt5 COMPONENTS Widgets Qml Quick Svg LinguistTools)
IF(Qt5Qml_FOUND)
    SET( HAVE_QT 1 )
    INCLUDE_DIRECTORIES( ${QT_INCLUDE_DIRS} )
    LINK_DIRECTORIES( ${QT_LIBRARY_DIRS} )
ENDIF()
IF( HAVE_QT)
    SET( CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}  ${Qt5Widgets_EXECUTABLE_COMPILE_FLAGS} )
    FILE( GLOB ${PROJECT_NAME}_SOURCES *.cpp src/*.cpp )
#    MESSAGE( "${PROJECT_NAME}_SOURCES: " ${${PROJECT_NAME}_SOURCES} )
    FILE( GLOB ${PROJECT_NAME}_HEADERS include/*.h )
    FILE( GLOB ${PROJECT_NAME}_QML qml/*.qml )
    SET( ${PROJECT_NAME}_TS translations/app_de.ts )
#    MESSAGE( "${PROJECT_NAME}_QML: " ${${PROJECT_NAME}_QML} )
#    MESSAGE( "${PROJECT_NAME}_TS: " ${${PROJECT_NAME}_TS} )
    SOURCE_GROUP("Header Files" FILES ${${PROJECT_NAME}_HEADERS})
    SOURCE_GROUP("Source Files" FILES ${${PROJECT_NAME}_SOURCES})
    SET( ${PROJECT_NAME}_QRC app.qrc )

    SET( GLOB TS_SOURCES ${${PROJECT_NAME}_SOURCES} ${${PROJECT_NAME}_HEADERS} ${${PROJECT_NAME}_QML} )
    QT5_CREATE_TRANSLATION( QM_FILES
        ${${PROJECT_NAME}_SOURCES}
        ${${PROJECT_NAME}_HEADER}
        ${${PROJECT_NAME}_QML}
        ${${PROJECT_NAME}_TS} )
    SET_SOURCE_FILES_PROPERTIES( ${${PROJECT_NAME}_TS} PROPERTIES OUTPUT_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/translations)
    QT5_ADD_TRANSLATION( QM_FILES ${${PROJECT_NAME}_TS} )

    ADD_DEFINITIONS(${Qt5Widgets_DEFINITIONS} ${QtQml_DEFINITIONS} ${Qt5Quick_DEFINITIONS})
    QT5_ADD_RESOURCES( ${PROJECT_NAME}_QRC_SOURCES ${${PROJECT_NAME}_QRC} )
    SET(CMAKE_AUTOMOC ON)
    SET(CMAKE_AUTORCC ON)
    INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR} ${Qt5Qml_INCLUDE_DIRS} )

    ADD_EXECUTABLE( ${PROJECT_NAME}
                    ${${PROJECT_NAME}_HEADERS}
                    ${${PROJECT_NAME}_SOURCES}
                    ${${PROJECT_NAME}_QRC_SOURCES}
                  )
#SET_PROPERTY(TARGET ${PROJECT_NAME} PROPERTY POSITION_INDEPENDENT_CODE ON)
    TARGET_LINK_LIBRARIES( ${PROJECT_NAME}
                Qt5::Widgets
                Qt5::Qml
                Qt5::Quick
                ${EXTRA_LIBS}
                ${OYJL_CORE_LIB}
                )
    IF(ENABLE_INSTALL_${PROJECT_UP_NAME})
      INSTALL (TARGETS ${PROJECT_NAME} DESTINATION ${CMAKE_INSTALL_BINDIR})
    ENDIF(ENABLE_INSTALL_${PROJECT_UP_NAME})
ENDIF()

