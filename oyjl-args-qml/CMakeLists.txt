# Json Ui renderer in Qt's QML+JavaScript
SET( PROJECT_NAME oyjl-args-qml )

INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR}/.. )

FIND_PACKAGE(Qt5 COMPONENTS Widgets Qml Quick Svg LinguistTools)
IF(Qt5Qml_FOUND)
    SET( HAVE_QT 1 )
    INCLUDE_DIRECTORIES( ${QT_INCLUDE_DIRS} )
    LINK_DIRECTORIES( ${QT_LIBRARY_DIRS} )
    OPTION(ENABLE_QT5_EXECUTABLE "Build Qt5 tools" OFF)
    IF(${CMAKE_SYSTEM_NAME} MATCHES Android)
      IF(NOT ENABLE_QT5_EXECUTABLE)
        SET( ENABLE_QT5_EXECUTABLE OFF )
      ENDIF(NOT ENABLE_QT5_EXECUTABLE)
      FIND_PACKAGE(Qt5 CONFIG COMPONENTS AndroidExtras)
      IF( Qt5AndroidExtras_FOUND )
        INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR} ${Qt5AndroidExtras_INCLUDE_DIRS} )
        SET( QT5_ANDROIDEXTRAS_LIB Qt5::AndroidExtras log )
      ENDIF()
    ELSE()
      SET( ENABLE_QT5_EXECUTABLE ON )
    ENDIF()
ENDIF()

IF( HAVE_QT)
    FIND_PACKAGE(OpenIcc)
    IF(HAVE_OPENICC)
      INCLUDE_DIRECTORIES( ${OPENICC_INCLUDE_DIR} )
      SET( OPENICC_DEFINITIONS -DOPENICC_LIB )
      IF( NOT OPENICC_LIBRARIES )
        SET( OPENICC_LIBRARY openicc-static )
        SET( OPENICC_LIBRARIES ${OPENICC_LIBRARY} )
        SET( OPENICC_LIBRARY_STATIC ${OPENICC_LIBRARY} )
      ENDIF( NOT OPENICC_LIBRARIES )
      MESSAGE( "-- OPENICC_LIBRARIES: " ${OPENICC_LIBRARIES} )
    ELSE(HAVE_OPENICC)
      SET( OPENICC_TREE ${CMAKE_CURRENT_SOURCE_DIR}/../.. )
      INCLUDE_DIRECTORIES( ${OPENICC_TREE}/src/include )
      INCLUDE_DIRECTORIES( ${CMAKE_BINARY_DIR}/src/include )
      SET( OPENICC_DEFINITIONS -DOPENICC_LIB )
      FILE( GLOB OPENICC_SOURCES
        ${OPENICC_TREE}/src/libopenicc/a*.c
        ${OPENICC_TREE}/src/libopenicc/openicc_*.c
        ${OPENICC_TREE}/src/libopenicc/xdg_*.c
        )

      CHECK_INCLUDE_FILE(glob.h HAVE_GLOB_H)
      CHECK_LIBRARY_EXISTS( c glob "glob.h" HAVE_GLOB )
      CHECK_LIBRARY_EXISTS( c issetugid "unistd.h" HAVE_ISSETUGID )
      CHECK_LIBRARY_EXISTS( c getauxval "sys/auxv.h" HAVE_GETAUXVAL )
      IF(NOT HAVE_GLOB)
        FILE( GLOB GLOB_SOURCES ${OPENICC_TREE}/src/libopenicc/glo*.c )
        SET( OPENICC_SOURCES ${OPENICC_SOURCES} ${GLOB_SOURCES} )
        IF( HAVE_ISSETUGID )
          SET_SOURCE_FILES_PROPERTIES( glob.c PROPERTIES COMPILE_DEFINITIONS "HAVE_ISSETUGID=1" )
        ENDIF( HAVE_ISSETUGID )
        IF( HAVE_GETAUXVAL )
          SET_SOURCE_FILES_PROPERTIES( glob.c PROPERTIES COMPILE_DEFINITIONS "HAVE_GETAUXVAL=1" )
        ENDIF( HAVE_GETAUXVAL )
        IF( HAVE_LOCALE_H)
          SET_SOURCE_FILES_PROPERTIES( glob.c PROPERTIES COMPILE_DEFINITIONS "HAVE_LOCALE_H=1" )
        ENDIF( HAVE_LOCALE_H )
      ENDIF( NOT HAVE_GLOB ) 
      SET( OPENICC_MAJOR_VERSION 0)
      SET( OPENICC_MINOR_VERSION 1)
      SET( OPENICC_MICRO_VERSION 1)
      SET( OPENICC_VERSION ${OPENICC_MAJOR_VERSION}.${OPENICC_MINOR_VERSION}.${OPENICC_MICRO_VERSION} )
      IF( OPENICC_SOURCES )
        CONFIGURE_FILE (
      		"${OPENICC_TREE}/src/libopenicc/openicc_conf.h.in"
      		"${CMAKE_BINARY_DIR}/src/include/openicc_conf.h"
        	@ONLY
      	)
        CONFIGURE_FILE (
          "${OPENICC_TREE}/src/include/openicc_version.h.in"
      		"${CMAKE_BINARY_DIR}/src/include/openicc_version.h"
      		@ONLY
      	)
      ENDIF( OPENICC_SOURCES )
      MESSAGE( "OPENICC_TREE: " ${OPENICC_TREE} " openicc_conf.h: " ${CMAKE_BINARY_DIR}/src/include/openicc_conf.h )
    ENDIF(HAVE_OPENICC)

    SET( CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}  ${Qt5Widgets_EXECUTABLE_COMPILE_FLAGS} )

    SET(CMAKE_AUTOMOC ON)
    SET(CMAKE_AUTORCC ON)
    INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR} ${Qt5Qml_INCLUDE_DIRS} )

    FILE( GLOB ${PROJECT_NAME}_SOURCES src/*.cpp )
    FILE( GLOB ${PROJECT_NAME}_HEADERS include/*.h )
    FILE( GLOB ${PROJECT_NAME}_QML qml/*.qml )
    SET( ${PROJECT_NAME}_TS translations/app_de.ts )
    SOURCE_GROUP("Header Files" FILES ${${PROJECT_NAME}_HEADERS})
    SOURCE_GROUP("Source Files" FILES ${${PROJECT_NAME}_SOURCES})
    SET( ${PROJECT_NAME}_QRC app.qrc )

    SET( GLOB TS_SOURCES ${${PROJECT_NAME}_SOURCES} ${${PROJECT_NAME}_HEADERS} ${${PROJECT_NAME}_QML} )
    QT5_CREATE_TRANSLATION( QM_FILES
        ${${PROJECT_NAME}_SOURCES}
        ${${PROJECT_NAME}_HEADER}
        ${${PROJECT_NAME}_QML}
        ${${PROJECT_NAME}_TS} )
    SET_SOURCE_FILES_PROPERTIES( ${${PROJECT_NAME}_TS} PROPERTIES OUTPUT_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/translations)
    QT5_ADD_TRANSLATION( QM_FILES ${${PROJECT_NAME}_TS} )

    FIND_PACKAGE(Qt5 CONFIG COMPONENTS DBus)
    IF( Qt5DBus_FOUND )
      INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR} ${Qt5DBus_INCLUDE_DIRS} )
      SET( QT5_DBUS_LIB Qt5::DBus )
    ENDIF()

    ADD_DEFINITIONS(${Qt5Widgets_DEFINITIONS} ${QtQml_DEFINITIONS} ${Qt5Quick_DEFINITIONS} ${Qt5DBus_DEFINITIONS} ${OPENICC_DEFINITIONS})

    QT5_ADD_RESOURCES( ${PROJECT_NAME}_QRC_SOURCES ${${PROJECT_NAME}_QRC} )
    IF(ENABLE_SHARED_LIBS_${PROJECT_UP_NAME})
      SET( PROJECT_LIB_SHARED OyjlArgsQml )
      ADD_LIBRARY( ${PROJECT_LIB_SHARED} SHARED
                    ${${PROJECT_NAME}_HEADERS}
                    lib.cpp
                    ${${PROJECT_NAME}_SOURCES}
                    ${OPENICC_SOURCES}
                    ${${PROJECT_NAME}_QRC_SOURCES}
                  )
      # versions for libraries
      SET_TARGET_PROPERTIES( ${PROJECT_LIB_SHARED}
        PROPERTIES VERSION   ${${PROJECT_UP_NAME}_VERSION_MAJOR}.${${PROJECT_UP_NAME}_VERSION_MINOR}.${${PROJECT_UP_NAME}_VERSION_MICRO}
                   SOVERSION ${${PROJECT_UP_NAME}_VERSION_MAJOR}
                     )

      TARGET_LINK_LIBRARIES( ${PROJECT_LIB_SHARED}
                Qt5::Widgets
                Qt5::Qml
                Qt5::Quick
                ${QT5_DBUS_LIB}
                ${QT5_ANDROIDEXTRAS_LIB}
                ${OPENICC_LIBRARIES}
                ${OYJL_TARGET_LIB}
                ${OYJL_CORE_LIB}
                ${EXTRA_LIBS}
                )
      SET_TARGET_PROPERTIES( ${PROJECT_LIB_SHARED} PROPERTIES
      PRIVATE_HEADER ""
      PUBLIC_HEADER "${CHEADERS_OYJL_PUBLIC}"
      RESOURCE ""
      )

      IF(ENABLE_INSTALL_${PROJECT_UP_NAME})
        INSTALL(
         TARGETS       ${PROJECT_LIB_SHARED}
         RUNTIME       DESTINATION ${CMAKE_INSTALL_BINDIR}
         FRAMEWORK     DESTINATION ${FRAMEWORK_DIR}
         LIBRARY       DESTINATION ${CMAKE_INSTALL_LIBDIR}
         ARCHIVE       DESTINATION ${CMAKE_INSTALL_LIBDIR}
         PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_DOWN_NAME}
         RESOURCE      DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}
         )
      ENDIF(ENABLE_INSTALL_${PROJECT_UP_NAME})

      IF( ENABLE_TESTS_${PROJECT_UP_NAME} AND ENABLE_QT5_EXECUTABLE )
        ADD_EXECUTABLE( oyjl-test-args-qml test.c )
        TARGET_LINK_LIBRARIES( oyjl-test-args-qml ${PROJECT_LIB_SHARED} )
      ENDIF( ENABLE_TESTS_${PROJECT_UP_NAME} AND ENABLE_QT5_EXECUTABLE )

    ENDIF(ENABLE_SHARED_LIBS_${PROJECT_UP_NAME})

    IF(ENABLE_STATIC_LIBS_${PROJECT_UP_NAME})
      SET( PROJECT_LIB_STATIC oyjl-args-qml-static )
      ADD_LIBRARY( ${PROJECT_LIB_STATIC} STATIC
                    ${${PROJECT_NAME}_HEADERS}
                    lib.cpp
                    ${${PROJECT_NAME}_SOURCES}
                    ${OPENICC_SOURCES}
                    ${${PROJECT_NAME}_QRC_SOURCES}
                  )
      SET( COMPILE_DEFINITIONS_STATIC "COMPILE_STATIC=1" )
      SET_TARGET_PROPERTIES( ${PROJECT_LIB_STATIC} PROPERTIES COMPILE_DEFINITIONS "${COMPILE_DEFINITIONS_STATIC}" )
      TARGET_LINK_LIBRARIES( ${PROJECT_LIB_STATIC}
                Qt5::Widgets
                Qt5::Qml
                Qt5::Quick
                ${QT5_DBUS_LIB}
                ${QT5_ANDROIDEXTRAS_LIB}
                ${OPENICC_LIBRARY_STATIC}
                ${OYJL_TARGET_LIB_STATIC}
                ${OYJL_CORE_LIB_STATIC}
                ${EXTRA_LIBS}
                )
      SET_TARGET_PROPERTIES( ${PROJECT_LIB_STATIC} PROPERTIES
      PRIVATE_HEADER ""
      PUBLIC_HEADER "${CHEADERS_OYJL_PUBLIC}"
      RESOURCE ""
      )

      IF(ENABLE_INSTALL_${PROJECT_UP_NAME})
        INSTALL(
         TARGETS       ${PROJECT_LIB_STATIC}
         RUNTIME       DESTINATION ${CMAKE_INSTALL_BINDIR}
         FRAMEWORK     DESTINATION ${FRAMEWORK_DIR}
         LIBRARY       DESTINATION ${CMAKE_INSTALL_LIBDIR}
         ARCHIVE       DESTINATION ${CMAKE_INSTALL_LIBDIR}
         PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_DOWN_NAME}
         RESOURCE      DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}
         )
      ENDIF(ENABLE_INSTALL_${PROJECT_UP_NAME})

      IF( ENABLE_TESTS_${PROJECT_UP_NAME} AND ENABLE_QT5_EXECUTABLE )
        ADD_EXECUTABLE( oyjl-test-args-qml-static test.c )
        TARGET_LINK_LIBRARIES( oyjl-test-args-qml-static ${PROJECT_LIB_STATIC} )
      ENDIF( ENABLE_TESTS_${PROJECT_UP_NAME} AND ENABLE_QT5_EXECUTABLE )

      IF( ENABLE_QT5_EXECUTABLE )
        ADD_EXECUTABLE( mini-app-example-static mini-app.c )
        MESSAGE( "OYJL_STATIC_LIBRARY: " ${OYJL_STATIC_LIBRARY} " OYJL_TARGET_LIB: " ${OYJL_TARGET_LIB} )
        TARGET_LINK_LIBRARIES( mini-app-example-static ${PROJECT_LIB_STATIC})
      ENDIF()

    ENDIF(ENABLE_STATIC_LIBS_${PROJECT_UP_NAME})

    SET(SVG_PlUGIN "")
    FOREACH(plugin ${Qt5Svg_PLUGINS})
      GET_TARGET_PROPERTY(_loc ${plugin} LOCATION)
      MESSAGE("Plugin ${plugin} is at location ${_loc}")
      SET(SVG_PlUGIN "${_loc}")
    ENDFOREACH()
#SET_PROPERTY(TARGET ${PROJECT_NAME} PROPERTY POSITION_INDEPENDENT_CODE ON)
    IF(ENABLE_SHARED_LIBS_${PROJECT_UP_NAME} AND ENABLE_QT5_EXECUTABLE)
      ADD_EXECUTABLE( ${PROJECT_NAME} main.cpp )
      TARGET_LINK_LIBRARIES( ${PROJECT_NAME} ${PROJECT_LIB_SHARED})
      IF( NOT HAVE_OYJL )
        INCLUDE( "${CMAKE_BINARY_DIR}/cmake/OyjlConfig.cmake" )
        UNSET( HAVE_OYJL )
      ENDIF()
      SET( LD_LIBRARY_PATH ${CMAKE_CURRENT_BINARY_DIR}/.. )
      OYJL_DOCUMENT_TOOL( ${PROJECT_NAME} main.cpp "de_DE.UTF8" ${DOC_PATH} )
      SET( TOOL mini-app-example )
      ADD_EXECUTABLE( ${TOOL} mini-app.c )
      TARGET_LINK_LIBRARIES( mini-app-example ${OYJL_TARGET_LIB} ${EXTRA_LIBS}  ${OYJL_CORE_LIB} ${EXTRA_CORE_LIBS} ) # OyjlArgsQML needs -ldl
    ENDIF ()
    IF (ENABLE_STATIC_LIBS_${PROJECT_UP_NAME} AND NOT ENABLE_SHARED_LIBS_${PROJECT_UP_NAME} AND ENABLE_QT5_EXECUTABLE)
      ADD_EXECUTABLE( ${PROJECT_NAME} main.cpp )
      TARGET_LINK_LIBRARIES( ${PROJECT_NAME} ${PROJECT_LIB_STATIC})
      SET( LD_LIBRARY_PATH ${CMAKE_CURRENT_BINARY_DIR}/.. )
      OYJL_DOCUMENT_TOOL( ${PROJECT_NAME} main.cpp "de_DE.UTF8" ${DOC_PATH} )
    ENDIF ()
    IF (NOT ENABLE_STATIC_LIBS_${PROJECT_UP_NAME} AND NOT ENABLE_SHARED_LIBS_${PROJECT_UP_NAME} AND ENABLE_QT5_EXECUTABLE)
      ADD_EXECUTABLE( ${PROJECT_NAME}
                    ${${PROJECT_NAME}_HEADERS}
                    main2.cpp
                    ${${PROJECT_NAME}_SOURCES}
                    ${OPENICC_SOURCES}
                    ${${PROJECT_NAME}_QRC_SOURCES}
                  )
      TARGET_LINK_LIBRARIES( ${PROJECT_NAME}
                Qt5::Widgets
                Qt5::Qml
                Qt5::Quick
                Qt5::Svg
                Qt5::QSvgPlugin
#${QT5SVG_LIBRARIES}
                ${QT5_DBUS_LIB}
                ${QT5_ANDROIDEXTRAS_LIB}
                ${OPENICC_LIBRARIES}
                ${OYJL_TARGET_LIB}
                ${OYJL_CORE_LIB}
                ${EXTRA_LIBS}
                )
      SET( LD_LIBRARY_PATH ${CMAKE_CURRENT_BINARY_DIR}/.. )
      OYJL_DOCUMENT_TOOL( ${PROJECT_NAME} main.cpp "de_DE.UTF8" ${DOC_PATH} )
    ENDIF ()
    IF( Qt5DBus_FOUND )
      SET_TARGET_PROPERTIES( ${PROJECT_NAME} PROPERTIES COMPILE_DEFINITIONS "QT_DBUS_LIB=1" )
    ENDIF()

    IF(ENABLE_INSTALL_${PROJECT_UP_NAME} AND ENABLE_QT5_EXECUTABLE)
      INSTALL (TARGETS ${PROJECT_NAME} DESTINATION ${CMAKE_INSTALL_BINDIR})
    ENDIF(ENABLE_INSTALL_${PROJECT_UP_NAME} AND ENABLE_QT5_EXECUTABLE)
ENDIF()

