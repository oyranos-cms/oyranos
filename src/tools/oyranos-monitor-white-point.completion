_oyranos_monitor_white_point()
{
    local cur prev words cword
    _init_completion -s || return

    #set -x -v

    local SEARCH=${COMP_WORDS[COMP_CWORD]}
    if [[ "$SEARCH" == "=" ]]; then
      SEARCH=""
    fi

    : "autocomplete options with choices for long options "$prev""
    case "$prev" in
        --daemon) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('0' '1' '2')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --white-point) # long option with dynamic args
            local OYJL_TEXTS
            if [[ "${COMP_WORDS[COMP_CWORD]}" == "=" ]]; then
              OYJL_TEXTS=$(${COMP_LINE}oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            else
              OYJL_TEXTS=$(${COMP_LINE} --white-point=oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            fi
            local IFS=$'\n'
            local WORD_LIST=()
            for OYJL_TEXT in $OYJL_TEXTS
              do WORD_LIST=("${WORD_LIST[@]}" "$OYJL_TEXT")
            done
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --night-white-point) # long option with dynamic args
            local OYJL_TEXTS
            if [[ "${COMP_WORDS[COMP_CWORD]}" == "=" ]]; then
              OYJL_TEXTS=$(${COMP_LINE}oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            else
              OYJL_TEXTS=$(${COMP_LINE} --night-white-point=oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            fi
            local IFS=$'\n'
            local WORD_LIST=()
            for OYJL_TEXT in $OYJL_TEXTS
              do WORD_LIST=("${WORD_LIST[@]}" "$OYJL_TEXT")
            done
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --sun-white-point) # long option with dynamic args
            local OYJL_TEXTS
            if [[ "${COMP_WORDS[COMP_CWORD]}" == "=" ]]; then
              OYJL_TEXTS=$(${COMP_LINE}oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            else
              OYJL_TEXTS=$(${COMP_LINE} --sun-white-point=oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            fi
            local IFS=$'\n'
            local WORD_LIST=()
            for OYJL_TEXT in $OYJL_TEXTS
              do WORD_LIST=("${WORD_LIST[@]}" "$OYJL_TEXT")
            done
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --night-effect) # long option with dynamic args
            local OYJL_TEXTS
            if [[ "${COMP_WORDS[COMP_CWORD]}" == "=" ]]; then
              OYJL_TEXTS=$(${COMP_LINE}oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            else
              OYJL_TEXTS=$(${COMP_LINE} --night-effect=oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            fi
            local IFS=$'\n'
            local WORD_LIST=()
            for OYJL_TEXT in $OYJL_TEXTS
              do WORD_LIST=("${WORD_LIST[@]}" "$OYJL_TEXT")
            done
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --sunlight-effect) # long option with dynamic args
            local OYJL_TEXTS
            if [[ "${COMP_WORDS[COMP_CWORD]}" == "=" ]]; then
              OYJL_TEXTS=$(${COMP_LINE}oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            else
              OYJL_TEXTS=$(${COMP_LINE} --sunlight-effect=oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            fi
            local IFS=$'\n'
            local WORD_LIST=()
            for OYJL_TEXT in $OYJL_TEXTS
              do WORD_LIST=("${WORD_LIST[@]}" "$OYJL_TEXT")
            done
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --export) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('man' 'markdown' 'json' 'json+command' 'export')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --render) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('gui' 'web' '-')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
    esac
    : "autocomplete options with choices for single letter options "$cur""
    case "$cur" in
        -d=*) # single letter option with static args
            local IFS=$'\n'
            local WORD_LIST=('0' '1' '2')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -w=*) # single letter option with dynamic args
            local OYJL_TEXTS
            if [[ "${COMP_WORDS[COMP_CWORD]}" == "=" ]]; then
              OYJL_TEXTS=$(${COMP_LINE}oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            else
              OYJL_TEXTS=$(${COMP_LINE} -w=oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            fi
            local IFS=$'\n'
            local WORD_LIST=()
            for OYJL_TEXT in $OYJL_TEXTS
              do WORD_LIST=("${WORD_LIST[@]}" "$OYJL_TEXT")
            done
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -n=*) # single letter option with dynamic args
            local OYJL_TEXTS
            if [[ "${COMP_WORDS[COMP_CWORD]}" == "=" ]]; then
              OYJL_TEXTS=$(${COMP_LINE}oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            else
              OYJL_TEXTS=$(${COMP_LINE} -n=oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            fi
            local IFS=$'\n'
            local WORD_LIST=()
            for OYJL_TEXT in $OYJL_TEXTS
              do WORD_LIST=("${WORD_LIST[@]}" "$OYJL_TEXT")
            done
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -s=*) # single letter option with dynamic args
            local OYJL_TEXTS
            if [[ "${COMP_WORDS[COMP_CWORD]}" == "=" ]]; then
              OYJL_TEXTS=$(${COMP_LINE}oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            else
              OYJL_TEXTS=$(${COMP_LINE} -s=oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            fi
            local IFS=$'\n'
            local WORD_LIST=()
            for OYJL_TEXT in $OYJL_TEXTS
              do WORD_LIST=("${WORD_LIST[@]}" "$OYJL_TEXT")
            done
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -g=*) # single letter option with dynamic args
            local OYJL_TEXTS
            if [[ "${COMP_WORDS[COMP_CWORD]}" == "=" ]]; then
              OYJL_TEXTS=$(${COMP_LINE}oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            else
              OYJL_TEXTS=$(${COMP_LINE} -g=oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            fi
            local IFS=$'\n'
            local WORD_LIST=()
            for OYJL_TEXT in $OYJL_TEXTS
              do WORD_LIST=("${WORD_LIST[@]}" "$OYJL_TEXT")
            done
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -e=*) # single letter option with dynamic args
            local OYJL_TEXTS
            if [[ "${COMP_WORDS[COMP_CWORD]}" == "=" ]]; then
              OYJL_TEXTS=$(${COMP_LINE}oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            else
              OYJL_TEXTS=$(${COMP_LINE} -e=oyjl-list | sed 's/\[/_/g;s/\]/_/g')
            fi
            local IFS=$'\n'
            local WORD_LIST=()
            for OYJL_TEXT in $OYJL_TEXTS
              do WORD_LIST=("${WORD_LIST[@]}" "$OYJL_TEXT")
            done
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -X=*) # single letter option with static args
            local IFS=$'\n'
            local WORD_LIST=('man' 'markdown' 'json' 'json+command' 'export')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -R=*) # single letter option with static args
            local IFS=$'\n'
            local WORD_LIST=('gui' 'web' '-')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
    esac


    : "autocomplete options "$cur""
    case "$cur" in
        -d|-w|-n|-s|-a|-g|-e|-b|-i|-o|-t|-X|-R|-u)
            : "finish short options with choices"
            COMPREPLY=("$cur=\"")
            set +x +v
            return
            ;;
        --daemon|--white-point|--night-white-point|--sun-white-point|--automatic|--night-effect|--sunlight-effect|--night-backlight|--latitude|--longitude|--twilight|--export|--render|--hour)
            : "finish long options with choices"
            COMPREPLY=("$cur=\"")
            set +x +v
            return
            ;;
        -m|-l|-r|-z|-h|-v|-V|-y|-c)
            : "finish short options without choices"
            COMPREPLY=("$cur ")
            set +x +v
            return
            ;;
        --modes|--location|--sunrise|--system-wide|--help|--synopsis|--verbose|--version|--test|--check)
            : "finish long options without choices"
            COMPREPLY=("$cur ")
            set +x +v
            return
            ;;
    esac


    : "show help for none '@' UIs"
    if [[ "$cur" == "" ]]; then
      if [[ ${COMP_WORDS[1]} == "" ]]; then
        $1 help synopsis 1>&2
      else
        $1 help ${COMP_WORDS[1]} 1>&2
      fi
    fi


    : "suggest group options for subcommands"
    if [[ "$cur" == "" ]] || [[ "$cur" == "-" ]] || [[ "$cur" == -- ]] || [[ "$cur" == -* ]]; then
      case "${COMP_WORDS[1]}" in
        -n|--night-white-point|-g|--night-effect|-b|--night-backlight)
          COMPREPLY=($(compgen -W '-z --system-wide -v --verbose -y --test' -- "$cur"))
            set +x +v
            return
            ;;
        -w|--white-point|-a|--automatic)
          COMPREPLY=($(compgen -W '-z --system-wide -v --verbose' -- "$cur"))
            set +x +v
            return
            ;;
        -s|--sun-white-point|-e|--sunlight-effect)
          COMPREPLY=($(compgen -W '-z --system-wide -v --verbose -y --test' -- "$cur"))
            set +x +v
            return
            ;;
        -l|--location|-i|--latitude|-o|--longitude)
          COMPREPLY=($(compgen -W '-t= --twilight= -z --system-wide -v --verbose -y --test' -- "$cur"))
            set +x +v
            return
            ;;
        -d|--daemon)
          COMPREPLY=($(compgen -W '-v --verbose' -- "$cur"))
            set +x +v
            return
            ;;
        -m|--modes|-r|--sunrise|-X|--export|-h|--help|-V|--version|-R|--render)
          COMPREPLY=($(compgen -W '-v --verbose' -- "$cur"))
            set +x +v
            return
            ;;
      esac
    fi

    : "suggest mandatory options on first args only"
    if [[ "${COMP_WORDS[2]}" == "" ]]; then
      local WORD_LIST=()
      WORD_LIST=("${WORD_LIST[@]}" -n= --night-white-point= -g= --night-effect= -b= --night-backlight= -w= --white-point= -a= --automatic= -s= --sun-white-point= -e= --sunlight-effect= -l --location -i= --latitude= -o= --longitude= -d= --daemon= -m --modes -r --sunrise -X= --export= -h --help -V --version -R= --render=)
      COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
      set +x +v
      return
    fi

    set +x +v
} &&
complete -o nosort -F _oyranos_monitor_white_point -o nospace oyranos-monitor-white-point


