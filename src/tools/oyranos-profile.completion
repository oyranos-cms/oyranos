_oyranos_profile()
{
    local cur prev words cword
    _init_completion -s || return

    #set -x -v

    local SEARCH=${COMP_WORDS[COMP_CWORD]}
    if [[ "$SEARCH" == "=" ]]; then
      SEARCH=""
    fi

    : "autocomplete options with choices for long options "$prev""
    case "$prev" in
        --export) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('man' 'markdown' 'json' 'json+command' 'export')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
        --render) # long option with static args
            local IFS=$'\n'
            local WORD_LIST=('gui' 'web' '-')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
            set +x +v
            return
            ;;
    esac
    : "autocomplete options with choices for single letter options "$cur""
    case "$cur" in
        -X=*) # single letter option with static args
            local IFS=$'\n'
            local WORD_LIST=('man' 'markdown' 'json' 'json+command' 'export')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
        -R=*) # single letter option with static args
            local IFS=$'\n'
            local WORD_LIST=('gui' 'web' '-')
            COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$SEARCH"))
            set +x +v
            return
            ;;
    esac


    : "autocomplete options "$cur""
    case "$cur" in
        -p|-n|-r|-w|-o|-c|-f|-j|-s|-X|-R)
            : "finish short options with choices"
            COMPREPLY=("$cur=\"")
            set +x +v
            return
            ;;
        --tag-pos|--tag-name|--remove-tag|--profile-name|--output|--device-class|--format|--json-name|--name-space|--export|--render)
            : "finish long options with choices"
            COMPREPLY=("$cur=\"")
            set +x +v
            return
            ;;
        -l|-m|-2|-4|-h|-v|-V)
            : "finish short options without choices"
            COMPREPLY=("$cur ")
            set +x +v
            return
            ;;
        --path|--short|--list-tags|--list-hash|--ppmcie|--icc-version-2|--icc-version-4|--help|--synopsis|--verbose|--version)
            : "finish long options without choices"
            COMPREPLY=("$cur ")
            set +x +v
            return
            ;;
    esac


    : "show help for none '@' UIs"
    if [[ "$cur" == "" ]]; then
      if [[ ${COMP_WORDS[1]} == "" ]]; then
        $1 help synopsis 1>&2
      else
        $1 help ${COMP_WORDS[1]} 1>&2
      fi
    fi


    : "suggest group options for subcommands"
    if [[ "$cur" == "" ]] || [[ "$cur" == "-" ]] || [[ "$cur" == -- ]] || [[ "$cur" == -* ]]; then
      case "${COMP_WORDS[1]}" in
        -l|--list-tags)
          COMPREPLY=($(compgen -W '-p= --tag-pos= -n= --tag-name= -v --verbose' -- "$cur"))
            set +x +v
            return
            ;;
        -m|--list-hash)
          COMPREPLY=($(compgen -W '-w= --profile-name=' -- "$cur"))
            set +x +v
            return
            ;;
        --ppmcie)
          COMPREPLY=($(compgen -W '-v --verbose' -- "$cur"))
            set +x +v
            return
            ;;
        -o|--output)
          COMPREPLY=($(compgen -W '-c= --device-class= -f= --format=' -- "$cur"))
            set +x +v
            return
            ;;
        -w|--profile-name)
          COMPREPLY=($(compgen -W '-j= --json-name= -m --list-hash -s= --name-space= -2 --icc-version-2 -4 --icc-version-4' -- "$cur"))
            set +x +v
            return
            ;;
        -h|--help|-X|--export|-V|--version|-R|--render)
          COMPREPLY=($(compgen -W '-v --verbose' -- "$cur"))
            set +x +v
            return
            ;;
        .*)
          COMPREPLY=($(compgen -W '--path --short -v --verbose' -- "$cur"))
            set +x +v
            return
            ;;
      esac
    fi

    : "suggest mandatory options on first args only"
    if [[ "${COMP_WORDS[2]}" == "" ]]; then
      local WORD_LIST=()
      local OYJL_TEXTS=$(baseGetChoices)
      local IFS=$'\n'
      for OYJL_TEXT in $OYJL_TEXTS
        do WORD_LIST=("${WORD_LIST[@]}"
"$OYJL_TEXT")
      done
      WORD_LIST=("${WORD_LIST[@]}" -l --list-tags -r= --remove-tag= -m --list-hash --ppmcie -o= --output= -w= --profile-name= -h --help -X= --export= -V --version -R= --render=)
      COMPREPLY=($(compgen -W '"${WORD_LIST[@]}"' -- "$cur"))
      set +x +v
      return
    fi

    set +x +v
} &&
complete -o nosort -F _oyranos_profile -o nospace oyranos-profile


